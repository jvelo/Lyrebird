#template("xwikivars.vm")
#set($LYREBIRD_MODE = 'production') ## Change this to development if you need to modify LESS files
<!DOCTYPE html>
<html lang="$xcontext.language">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=$xwiki.encoding" />

    #if(!$title)
      #set($title = $!xwiki.getSpacePreference('title'))
      #if($title != '')
        #set($title = "$escapetool.xml($xwiki.parseContent($title))")
      #else
        #set($title = "$escapetool.xml($!tdoc.displayTitle)")
      #end
    #else
      #set($title = $escapetool.xml($title))
    #end
    <title>$title</title>

    ## Enable bootstrap responsive design
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <meta name="description" content="">
    <meta name="author" content="">

    ## ---------------------------------------------------------------------------------------------------------------
    ## Define the default scripting language that is used for intrinsic events (e.g. onmouseover attributes).
    ## ---------------------------------------------------------------------------------------------------------------
    <meta http-equiv="Content-Script-Type" content="text/javascript" />

    <meta http-equiv="imagetoolbar" content="no"/>
    ## ---------------------------------------------------------------------------------------------------------------
    ## Disable the toolbar that comes up when you mouse over an image in MSIE
    ## ---------------------------------------------------------------------------------------------------------------

    ## ---------------------------------------------------------------------------------------------------------------
    ## Make sure search engine spiders give the plain page instead of ?viewer=comments, ?viewer=code etc.
    ## ---------------------------------------------------------------------------------------------------------------    
    <link rel="canonical" href="$doc.getURL('view')" />
    ## ---------------------------------------------------------------------------------------------------------------
    ## Store the space name, page name, wiki name, full document name (for convenience since it can be reconstructed
    ## from the individual wiki/space/page names), and other metadata, so that it can be accessed from Javascript code.
    ## For example, to pass it to the server side using an Ajax query.
    ## Usage example: var name = $$("meta[name='page']")[0].content;
    ## ---------------------------------------------------------------------------------------------------------------
    <meta name="document" content="$escapetool.xml($doc.fullName)"/>
    <meta name="wiki" content="$escapetool.xml($doc.wiki)"/>
    <meta name="space" content="$escapetool.xml($doc.space)"/>
    <meta name="page" content="$escapetool.xml($doc.name)"/>
    <meta name="version" content="$doc.version"/>
    <meta name="restURL" content="${request.contextPath}/rest/wikis/${xcontext.database}/spaces/$escapetool.url(${doc.space})/pages/$escapetool.url(${doc.name})"/>
    ## ---------------------------------------------------------------------------------------------------------------
    ## Localize GWT applications.
    ## ---------------------------------------------------------------------------------------------------------------
    <meta name="gwt:property" content="locale=$!{xcontext.language}" />
    ## ---------------------------------------------------------------------------------------------------------------
    ## Add user-defined Meta directives
    ## ---------------------------------------------------------------------------------------------------------------
    $xwiki.parseContent($!xwiki.getSpacePreference("meta"))
    ## ---------------------------------------------------------------------------------------------------------------
    ## Hook for inserting Link extensions. This will be replaced with the pulled link references.
    ## ---------------------------------------------------------------------------------------------------------------
    <!-- com.xpn.xwiki.plugin.skinx.LinkExtensionPlugin -->

    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    #if($LYREBIRD_MODE == 'development')
    <!-- Le styles -->
    <link rel="stylesheet/less" type="text/css" href="$xwiki.getSkinFile('lib/bootstrap/less/bootstrap.less', true)">
    <script src="$xwiki.getSkinFile('lib/less/less-1.3.0.min.js')" type="text/javascript"></script>
    #else
    <link href="$xwiki.getSkinFile('lib/bootstrap/css/bootstrap-xwiki.min.css', true)" rel="stylesheet">
    #end

    <link href="$xwiki.getSkinFile('xwiki.css', true)" rel="stylesheet">
    <link href="$xwiki.getSkinFile("uicomponents/suggest/suggest.css", true)" rel="stylesheet" type="text/css" />

    ## Hook for inserting CSS skin extensions
    <!-- com.xpn.xwiki.plugin.skinx.CssSkinExtensionPlugin -->
    <!-- com.xpn.xwiki.plugin.skinx.CssSkinFileExtensionPlugin -->


$xwiki.jsfx.use('js/scriptaculous/effects.js', true)
$xwiki.jsfx.use('js/xwiki/widgets/modalPopup.js', true)
$xwiki.ssfx.use('js/xwiki/widgets/modalPopup.css', true)
$xwiki.jsfx.use('uicomponents/widgets/confirmationBox.js', true)
$xwiki.ssfx.use('uicomponents/widgets/confirmationBox.css', true)
$xwiki.jsfx.use('uicomponents/widgets/confirmedAjaxRequest.js', true)
$xwiki.jsfx.use('uicomponents/widgets/notification.js', true)
$xwiki.ssfx.use('uicomponents/widgets/notification.css', true)
$xwiki.jsfx.use('uicomponents/widgets/list/xlist.js')
$xwiki.jsfx.use('uicomponents/suggest/suggest.js')

$xwiki.jsfx.use('lib/bootstrap/js/bootstrap-collapse.js')
$xwiki.jsfx.use('lib/bootstrap/js/bootstrap-dropdown.js')

    <script type="text/javascript" src="$xwiki.getSkinFile("lib/jquery/jquery-1.7.2.min.js")"></script>
    <script type="text/javascript">
    //<![CDATA[
    jQuery.noConflict();
    // ]]>
    </script>
    <script type="text/javascript" src="$xwiki.getSkinFile("js/prototype/prototype.js")"></script>
    <script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/xwiki.js", true)"></script>
    <script type="text/javascript">
// <![CDATA[
document.observe("dom:loaded", function(event){
  // Remove livetable styles
  $$('.xwiki-livetable-display-header').invoke("removeClassName", "xwiki-livetable-display-header");
  $$('.xwiki-livetable-display-body').invoke("removeClassName", "xwiki-livetable-display-body");
  $$('.xwiki-livetable-display').invoke("addClassName", "condensed-table zebra-striped");
});

XWiki.webapppath = "${xwiki.webAppPath}";
XWiki.servletpath = "${xwiki.servletPath}";
XWiki.contextPath = "${request.contextPath}";
XWiki.mainWiki = "$!{escapetool.javascript(${xcontext.mainWikiName})}";
XWiki.currentWiki = "$!{escapetool.javascript(${xcontext.database})}";
XWiki.currentSpace = "$!{escapetool.javascript($doc.space)}";
XWiki.currentPage = "$!{escapetool.javascript($doc.name)}";
XWiki.editor = "$!{escapetool.javascript($editor)}";
XWiki.viewer = "$!{escapetool.javascript($viewer)}";
XWiki.contextaction = "${xcontext.getAction()}";
XWiki.docisnew = $!doc.isNew();
XWiki.docsyntax = "$!doc.getSyntax().toIdString()";
XWiki.blacklistedSpaces = [ #foreach($space in $blacklistedSpaces)#if($velocityCount > 1),#end"$space"#end ];
XWiki.hasEdit = $hasEdit;
XWiki.hasProgramming = $hasProgramming;
XWiki.hasBackupPackImportRights =#if ($xwiki.package) $xwiki.package.hasBackupPackImportRights()#else false#end;
window.docviewurl = "${doc.getURL('view')}";
window.docediturl = "${doc.getURL('edit')}";
window.docsaveurl = "${doc.getURL('save')}";
window.docgeturl = "${doc.getURL('get')}";
// ]]>
    </script>

#if(($xcontext.action=="inline")||($xcontext.action=="edit") || ($xcontext.action=="admin"))
$xwiki.get('jsfx').use('uicomponents/widgets/validation/livevalidation_prototype.js')
$xwiki.get('ssfx').use('uicomponents/widgets/validation/livevalidation.css')
<script type="text/javascript">
// <![CDATA[
var cancelEditNextOnunload;
var cancelCancelEditFlag = true;
var lockEditFlag = false;

function cancelEditResponse() {
}

function cancelEdit() {
  if (cancelCancelEditFlag) {
    var surl = "$doc.getExternalURL('cancel', 'ajax=1')";
    var myAjax = new Ajax.Request(surl, {
      method: 'get',
      parameters: "",
      asynchronous: true,
      discardResponse: true
    });
    cancelCancelEditFlag = false;
  }
  if (cancelEditNextOnunload) {
    cancelEditNextOnunload();
  }
}

function lockEdit() {
  if (!lockEditFlag) {
#if ($xcontext.action == 'inline')
    var surl = "$doc.getExternalURL('lock', "action=inline&ajax=1&${docvariant.replace('&amp;', '&')}")";
#else
    var surl = "$doc.getExternalURL('lock', "ajax=1&${docvariant.replace('&amp;', '&')}")";
#end
    var myAjax = new Ajax.Request(surl, {
      method: 'get',
      parameters: "",
      asynchronous: true
    });
    lockEditFlag = false;
  }
}

function prepareCancelEdit() {
  lockEdit();
}
function cancelCancelEdit() {
  cancelCancelEditFlag = false;
}
Event.observe(window, "unload", cancelEdit);
Event.observe(window, "pagehide", cancelEdit);
Event.observe(document, "dom:loaded", prepareCancelEdit);
// ]]>
</script>
#end

    ##
    ## Hooks for inserting JavaScript skin extensions
    ##
    ## - Skin file extension hook. Placed first since skin extensions might need to have xwiki or external libraries included first to be able to work properly
    <!-- com.xpn.xwiki.plugin.skinx.JsSkinFileExtensionPlugin -->
    ## - Skin extension hook
    <!-- com.xpn.xwiki.plugin.skinx.JsSkinExtensionPlugin -->

    <!-- Le fav and touch icons -->
    <link rel="shortcut icon" href="images/favicon.ico">
    <link rel="apple-touch-icon" href="$xwiki.getSkinFile('apple-touch-icon.png')">
    <link rel="apple-touch-icon" sizes="72x72" href="$xwiki.getSkinFile('apple-touch-icon-72x72.png')">
    <link rel="apple-touch-icon" sizes="114x114" href="$xwiki.getSkinFile('apple-touch-icon-114x114.png')">
  </head>

  <body id="body">

    #template("topbar.vm")

    #set($lyrebirdConfigurationDocument = $xwiki.getDocument('Lyrebird.Configuration'))
    #set($lyrebirdConfiguration = $lyrebirdConfigurationDocument.getObject('Lyrebird.ConfigurationClass'))
    #set($lyrebirdLayout = $lyrebirdConfiguration.getProperty('layout').value)
    #set($lyrebirdPanelSpan = $lyrebirdConfiguration.getProperty('panelSpan').value)
    #if($lyrebirdPanelSpan < 1 || $lyrebirdPanelSpan > 16)
      #set($lyrebirdPanelSpan = 3)
    #end
    #template("layoutvars.vm")

    #if($lyrebirdLayout == 'fluid' && $showRightPanels == '1')
    <div class="alert-message error">
      <p>Right panels are not supported with <strong>fluid layout</strong>. Please fix your configuration to make this message disappear</p>
    </div>
    #end

    #set($contentColumnSpan = 12) ## get from config
    #if($lyrebirdLayout == 'fluid')
    <div class="container-fluid">
      <div class="sidebar">
        #template('leftpanels.vm')
      </div>
      <div class="content" id="mainContentArea">
    #else
      ## Layout is fixed
      <div class="container">
        <div class="row">
        #if($showLeftPanels == '1')
          #set($contentColumnSpan = $mathtool.sub($contentColumnSpan, $lyrebirdPanelSpan))
          <div class="span${lyrebirdPanelSpan}">
          #template("leftpanels.vm")
          </div>
        #end
        #if($showRightPanels == '1')
          #set($contentColumnSpan = $mathtool.sub($contentColumnSpan, $lyrebirdPanelSpan))
        #end
          <div class="span${contentColumnSpan} content">
    #end
